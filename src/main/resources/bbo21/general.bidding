# General bids

# C = ♣
# D = ♦
# H = ♥
# S = ♠

#
# Bid NT if possible to the right level
#
[] 3N => gf, partial_stoppers unstopped;
    test Axx AQxx Qxx Qxx:
        1C 1H
        1N 3N;

[] 2N => inv, partial_stoppers unstopped;
    test Axx Kxxx Qxx Qxx:
        1C 1H
        1N 2N;

#
# Pass NT 
#
[] 3N P => gf-;
    test Axx Kxx Kxx Qxxx:
        1D 2N
        3N P;

[] 2N P => inv-;
    test xxx Kxxx Kxx xxx:
        1C 1H
        2N P;

#
# Bid a new suit
#
[i_bid_suit y, unbid_suit x] NJx:<4C:nonconventional => gf+, 4+ x;
    test xx AQxxx Qxxx Ax:
        1C 1H
        2C 2D;

#
# Pass minor at right level
# 
[] 3m P => inv-, fit m;
    test xxx Qxx Axxxx xx:
        1C 1D
        3D P;

[] 2m P => min-, fit m;
    test xxx Qxx Axxxx xx:
        1C 1D
        2D P;
    
#
# Bid minor at right level
#    
[] 3m => inv, fit m;
    test Ax xx AQxx AQxxx:
        1C 1D
        3D;

[] 2m => min, fit m;
    test xx xx AQxx AQxxx:
        1C 1D
        2D;

#
# Rebid minor
#     
[i_bid_suit m] Jm:<3N => inv, rebiddable m;
    test Kxx xxx AQxxxx x:
        1C 1D
        2C 3D;
    anti_test Kxx xxxx AQxxx x:
        1C 1D
        2C 3D;

#
# Pass preference
#
[partner_is_two_suited x y] NJx:<2N P => min, prefer x to y;
    test AQxxx x xxxx xxx:
        1H 1S
        2C P;             
    test xxx AQxxx xx xxx:
        1D 1H
        1S P;             

#
# Show preference
#
[partner_is_two_suited x y] 2x => min, prefer x to y;
    test AQxxx xx xxxx xx:
        1H 1S
        2C 2H;

#
# Three suited.   bid 4-th suit
#      
[we_are_three_suited, unbid_suit x] NJx:<3N => gf+;
    test AQxxx AK xx xxxx:
        1H 1S
        2C 2D;
